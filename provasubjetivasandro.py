# -*- coding: utf-8 -*-
"""Provasubjetivasandro.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1keoLETpF9QUl_Kf87tGC3BXWgMrCDFLW
"""

# -*- coding: utf-8 -*-
"""Analisador de Arquivos - Estatísticas de Números Extraídos"""

# Instalando as bibliotecas necessárias
!pip install PyPDF2
!pip install python-docx


# Autor: Marcos Alexandre
# Matrícula: 2024012700
# Prova Subjetiva - Programação II - Python


import os
import statistics
import docx  # Para lidar com arquivos .docx
import PyPDF2  # Para manipulação de arquivos PDF
import re  # Para encontrar e extrair números do texto
import sys  # Para controlar a execução do programa

# Definindo o diretório onde os arquivos estão localizados
diretorio_arquivos = 'documentos'

# Nome base do arquivo sem a extensão
nome_arquivo_base = 'dados'

# Função para buscar o arquivo no diretório especificado
def localizar_arquivo():
    for extensao in ['.pdf', '.docx']:
        arquivo_path = os.path.join(diretorio_arquivos, nome_arquivo_base + extensao)
        if os.path.exists(arquivo_path):
            return arquivo_path
    return None

# Função para extrair texto de arquivos PDF
def extrair_pdf(caminho_arquivo):
    try:
        with open(caminho_arquivo, 'rb') as arquivo:
            leitor_pdf = PyPDF2.PdfReader(arquivo)
            texto_extraido = ''
            for pagina in leitor_pdf.pages:
                texto_extraido += pagina.extract_text()
            return texto_extraido
    except Exception as erro:
        print(f'Erro ao tentar ler o arquivo PDF: {erro}')
        return ''

# Função para extrair texto de arquivos DOCX
def extrair_docx(caminho_arquivo):
    try:
        documento = docx.Document(caminho_arquivo)
        texto_extraido = '\n'.join(paragrafo.text for paragrafo in documento.paragraphs)
        return texto_extraido
    except Exception as erro:
        print(f'Erro ao tentar ler o arquivo DOCX: {erro}')
        return ''

# Função que encontra e retorna todos os números presentes no texto
def capturar_numeros(texto):
    return [float(valor) for valor in re.findall(r'[-+]?\d*\.\d+|\d+', texto)]

# Função principal para controlar o fluxo de execução do programa
def executar_analise():
    caminho = localizar_arquivo()

    if not caminho:
        print('Não encontramos os arquivos "dados.pdf" ou "dados.docx" no diretório "documentos".')
        sys.exit(1)  # Encerra o programa em caso de erro

    # Determina o tipo de arquivo e realiza a leitura adequada
    if caminho.endswith('.pdf'):
        conteudo = extrair_pdf(caminho)
    elif caminho.endswith('.docx'):
        conteudo = extrair_docx(caminho)
    else:
        print('Formato de arquivo não reconhecido.')
        sys.exit(1)

    # Verifica se o conteúdo extraído do arquivo não está vazio
    if not conteudo.strip():
        print('O conteúdo do arquivo está vazio.')
        sys.exit(1)

    # Extrai todos os números do texto
    numeros_extraidos = capturar_numeros(conteudo)

    if not numeros_extraidos:
        print('Nenhum número foi encontrado no arquivo. Verifique o conteúdo.')
        sys.exit(1)

    # Calcula as principais estatísticas dos números extraídos
    media_valores = statistics.mean(numeros_extraidos)
    mediana_valores = statistics.median(numeros_extraidos)
    soma_valores = sum(numeros_extraidos)
    valor_maximo = max(numeros_extraidos)
    valor_minimo = min(numeros_extraidos)

    # Exibe os resultados calculados
    print('\n=== Estatísticas dos números extraídos ===')
    print(f'Média dos números: {media_valores}')
    print(f'Mediana dos números: {mediana_valores}')
    print(f'Somatório dos números: {soma_valores}')
    print(f'Maior número: {valor_maximo}')
    print(f'Menor número: {valor_minimo}')

# Ponto de entrada principal para executar o programa
if __name__ == '__main__':
    executar_analise()