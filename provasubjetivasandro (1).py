# -*- coding: utf-8 -*-
"""provasubjetivasandro.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xwuLYQ35FUY70CJqjeH3gYuAhuzU4p1_
"""

# -*- coding: utf-8 -*-
"""
Analisador de Arquivos - Estatísticas de Números
Autor: Marcos Alexandre
Matrícula: 2024012700
Prova Subjetiva - Programação II - Python
"""
!pip install PyPDF2
!pip install python-docx
# Importando as bibliotecas necessárias
import os
import re
import statistics
import PyPDF2
import docx
import sys

# Função para procurar e abrir o arquivo de dados
def buscar_arquivo():
    arquivos = ['dados.pdf', 'dados.docx']
    for arquivo in arquivos:
        caminho = os.path.join('documentos', arquivo)
        if os.path.isfile(caminho):
            return caminho
    return None

# Função para ler e extrair texto de um PDF
def obter_texto_pdf(caminho_pdf):
    try:
        with open(caminho_pdf, 'rb') as pdf_file:
            leitor = PyPDF2.PdfReader(pdf_file)
            texto = ''
            for pagina in leitor.pages:
                texto += pagina.extract_text()
            return texto
    except Exception as erro:
        print(f"Erro ao ler o arquivo PDF: {erro}")
        return ""

# Função para ler e extrair texto de um DOCX
def obter_texto_docx(caminho_docx):
    try:
        doc = docx.Document(caminho_docx)
        texto = ''
        for paragrafo in doc.paragraphs:
            texto += paragrafo.text + '\n'
        return texto
    except Exception as erro:
        print(f"Erro ao ler o arquivo DOCX: {erro}")
        return ""

# Função para extrair todos os números de um texto
def extrair_numeros_do_texto(texto):
    return [float(num) for num in re.findall(r'[-+]?\d*\.\d+|\d+', texto)]

# Função para calcular e mostrar as estatísticas dos números
def calcular_estatisticas(numeros):
    if not numeros:
        print("Nenhum número encontrado no arquivo.")
        return

    media = statistics.mean(numeros)
    mediana = statistics.median(numeros)
    soma = sum(numeros)
    maior = max(numeros)
    menor = min(numeros)

    print("\n=== Estatísticas dos Números ===")
    print(f"Média: {media}")
    print(f"Mediana: {mediana}")
    print(f"Soma: {soma}")
    print(f"Maior: {maior}")
    print(f"Menor: {menor}")

# Função principal que executa a análise
def analisar_arquivo():
    caminho_arquivo = buscar_arquivo()

    if not caminho_arquivo:
        print("Arquivos 'dados.pdf' ou 'dados.docx' não encontrados no diretório 'documentos'.")
        sys.exit(1)

    # Escolher a função de leitura com base na extensão do arquivo
    if caminho_arquivo.endswith('.pdf'):
        conteudo = obter_texto_pdf(caminho_arquivo)
    elif caminho_arquivo.endswith('.docx'):
        conteudo = obter_texto_docx(caminho_arquivo)
    else:
        print("Formato de arquivo não suportado.")
        sys.exit(1)

    # Verificar se o conteúdo extraído não está vazio
    if not conteudo.strip():
        print("O arquivo está vazio.")
        sys.exit(1)

    # Extrair números do conteúdo do arquivo
    numeros = extrair_numeros_do_texto(conteudo)

    # Calcular e exibir as estatísticas
    calcular_estatisticas(numeros)

# Ponto de entrada
if __name__ == '__main__':
    analisar_arquivo()